"""
LAB03 - Script Principal
Executa coleta e an√°lise de PRs do GitHub
"""

import os
import sys
from datetime import datetime

# Adicionar src ao path
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'src'))

from src.GitHubPRCollector import GitHubPRCollector
from src.PRAnalyzer import PRAnalyzer
from src.PRVisualizer import PRVisualizer


def main():
    print("=" * 80)
    print("LAB03 - Code Review no GitHub")
    print("=" * 80)
    
    # 1. CONFIGURA√á√ÉO
    token = input("\nDigite seu token do GitHub: ").strip()
    if not token:
        print("‚ùå Token obrigat√≥rio!")
        return
    
    print("\n‚úì Token configurado!")
    
    # 2. PAR√ÇMETROS
    print("\n" + "-" * 80)
    print("PAR√ÇMETROS DA COLETA")
    print("-" * 80)
    
    try:
        num_repos = int(input("Quantos reposit√≥rios processar? [5]: ") or "5")
        prs_per_repo = int(input("Quantos PRs por reposit√≥rio? [50]: ") or "50")
    except:
        num_repos, prs_per_repo = 5, 50
    
    # 3. CRIAR DIRET√ìRIOS
    os.makedirs('output', exist_ok=True)
    os.makedirs('output/data', exist_ok=True)
    os.makedirs('output/plots', exist_ok=True)
    
    timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
    
    # 4. COLETA
    print("\n" + "=" * 80)
    print("ETAPA 1: Coletando Reposit√≥rios")
    print("=" * 80)
    
    collector = GitHubPRCollector(token)
    
    # Buscar reposit√≥rios populares
    popular = collector.get_popular_repositories(limit=50)
    filtered = collector.filter_repositories(popular, min_prs=100)
    
    repos_file = f'output/data/repositories_{timestamp}.csv'
    collector.save_repositories(filtered[:num_repos], repos_file)
    
    # 5. COLETAR PRs
    print("\n" + "=" * 80)
    print("ETAPA 2: Coletando Pull Requests")
    print("=" * 80)
    
    all_prs = []
    for i, repo in enumerate(filtered[:num_repos], 1):
        print(f"\n[{i}/{num_repos}] {repo['owner']}/{repo['name']}")
        try:
            prs = collector.collect_prs_from_repo(
                repo['owner'], 
                repo['name'], 
                max_prs=prs_per_repo
            )
            all_prs.extend(prs)
        except Exception as e:
            print(f"  ‚úó Erro: {e}")
    
    dataset_file = f'output/data/dataset_{timestamp}.csv'
    collector.save_dataset(all_prs, dataset_file)
    
    # Verificar se coletou PRs
    if len(all_prs) == 0:
        print("\n‚ùå ERRO: Nenhum PR foi coletado!")
        print("Poss√≠veis causas:")
        print("  ‚Ä¢ Token sem permiss√µes adequadas")
        print("  ‚Ä¢ Rate limit atingido")
        print("  ‚Ä¢ Reposit√≥rios sem PRs que atendem os crit√©rios")
        print("\nTente novamente com:")
        print("  ‚Ä¢ Menos reposit√≥rios")
        print("  ‚Ä¢ Token novo com permiss√µes: public_repo, read:user")
        return
    
    # 6. AN√ÅLISE
    print("\n" + "=" * 80)
    print("ETAPA 3: An√°lise Estat√≠stica")
    print("=" * 80)
    
    analyzer = PRAnalyzer(dataset_file)
    results = analyzer.run_all_analyses()
    
    report_file = f'output/analysis_{timestamp}.txt'
    analyzer.generate_report(report_file)
    
    # 7. VISUALIZA√á√ïES
    print("\n" + "=" * 80)
    print("ETAPA 4: Gerando Gr√°ficos")
    print("=" * 80)
    
    visualizer = PRVisualizer(dataset_file)
    plot_dir = f'output/plots/{timestamp}'
    visualizer.generate_all_plots(plot_dir)
    
    # 8. RESUMO
    print("\n" + "=" * 80)
    print("‚úÖ CONCLU√çDO COM SUCESSO!")
    print("=" * 80)
    print(f"\nüìÅ Arquivos gerados:")
    print(f"   ‚Ä¢ Reposit√≥rios: {repos_file}")
    print(f"   ‚Ä¢ Dataset: {dataset_file}")
    print(f"   ‚Ä¢ An√°lise: {report_file}")
    print(f"   ‚Ä¢ Gr√°ficos: {plot_dir}/")
    print("\n" + "=" * 80 + "\n")


if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è  Interrompido pelo usu√°rio\n")
    except Exception as e:
        print(f"\n‚ùå Erro: {e}\n")
        import traceback
        traceback.print_exc()